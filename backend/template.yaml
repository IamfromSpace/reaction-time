AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Lambda for recording reaction time test results.
Parameters:
  TableStack:
    Type: String
    Description: The name of the stack that exports the table that will be used
  UserPoolStack:
    Type: String
    Description: The name of the stack that exports the user pool that will be used
  LambdaCodeStack:
    Type: String
    Description: The name of the stack that exports the bucket where the lambda code is stored
  CertStack:
    Type: String
    Description: The name of the stack that exports the certificate for the domain name
  CodeVersion:
    Type: String
    Description: The version string from the bucket of the code that will be used
Resources:
  ReactionTime:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: NOT_USED
      Runtime: provided
      Description: Lambda for recording reaction time test results.
      CodeUri:
        Bucket:
          Fn::ImportValue: !Ref LambdaCodeStack
        Key: !Sub '${AWS::StackName}.zip'
        Version: !Ref CodeVersion
      Events:
        ApiInteraction:
          Type: Api
          Properties:
            Path: /api/{proxy+}
            Method: post
            RestApiId: !Ref Api
            Auth:
              Authorizer: Cognito
      Environment:
        Variables:
          TABLE_NAME:
            Fn::ImportValue: !Sub "${TableStack}-Table"
      Policies:
        - AWSLambdaBasicExecutionRole
        - Fn::ImportValue: !Sub "${TableStack}-TableDataPlanePolicy"
      MemorySize: 128
      Timeout: 3
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: default
      EndpointConfiguration: "REGIONAL"
      Auth:
        Authorizers:
          Cognito:
            UserPoolArn:
              Fn::ImportValue:
                # Note: that we need the UserPoolStack to export the arn,
                # because if we have to use a GetAtt from an subbed and imported
                # value, it breaks the SAM transformer.
                Fn::Sub: "${UserPoolStack}-UserPoolArn"
  #TODO: Move this into the DomainName Stack so all the domain pieces happen in the same place.
  CustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName:
        Fn::ImportValue: !Sub "${CertStack}-DomainName"
      RegionalCertificateArn:
        Fn::ImportValue: !Sub "${CertStack}-Cert"
      EndpointConfiguration:
        Types:
          - "REGIONAL"
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref CustomDomain
      RestApiId: !Ref Api
      Stage: default
    # This is a hack to make sure the stage that the Serverless transform creates
    # (and we do not see in the template) is available by the time we add the mapping.
    DependsOn:
      ApidefaultStage
Outputs:
  Api:
    Description: The Rest API Id
    Value: !Ref Api
    Export:
      Name: !Sub "${AWS::StackName}-Api"
  ApiRootResourceId:
    Description: The Rest API Id
    Value: !GetAtt Api.RootResourceId
    Export:
      Name: !Sub "${AWS::StackName}-ApiRootResourceId"
